#!/bin/env python

###################################################################################################
# Name:         install_password_files                                                            #
# Author:       Randy Johnson                                                                     #
# Description:  Creates a database password file and installs it into the $ORACLE_HOME/dbs        #
#               directory on all nodes in the cluster.                                            #
# Dependencies: $ASM_HOME/bin/olsnodes                                                            #
#               $ORACLE_HOME/bin/orapwd                                                           #
#               scp                                                                               #
#                                                                                                 #
# Usage: install_password_file [options]                                                          #
#                                                                                                 #
# options:                                                                                        #
#   -h, --help  show this help message and exit                                                   #
#   -v          show version info.                                                                #
#   -c          show configuration.                                                               #
#                                                                                                 #
# History:                                                                                        #
#                                                                                                 #
# Date       Ver. Who              Change Description                                             #
# ---------- ---- ---------------- -------------------------------------------------------------- #
# 03/03/2015 1.00 Randy Johnson    Initial release.                                               #
###################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
import sys
from datetime     import datetime
from optparse     import OptionParser
from os           import getpgid
from os           import environ
from os.path      import basename
from os.path      import dirname
from os.path      import join as pathjoin
from os.path      import split as pathsplit
from sys          import argv
from sys          import exit
from string       import join
from string       import upper
from socket       import gethostname
from subprocess   import Popen
from subprocess   import PIPE
from subprocess   import STDOUT
from Migration    import DumpConfig
from Migration    import IsReadable
from Migration    import IsExecutable
from Migration    import GetDbState
from Migration    import GetNodes
from Migration    import Logger
from Migration    import ProcessConfig
from Migration    import PrintError
from Migration    import PythonStackTrace
from Migration    import SetOracleEnv

# --------------------------------------
# ---- Function Definitions ------------
# --------------------------------------

# --------------------------------------
# ---- End Function Definitions --------
# --------------------------------------

# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):      # if this is true, then this script is *not* being imported by another Python script.
  Cmd          = basename(argv[0]).split('.')[0]
  CmdDesc      = 'Install Password File (' + Cmd + ')'
  ErrChk       = False
  Sql          = ''
  VersionDate  = 'Mon Feb 16 17:06:51 EST 2015'
  Version      = '1.00'
  Hostname     = gethostname().split('.')[0]
  Now          = datetime.now()
  MigDict      = {}
  CmdDict      = {}

  # Process command line options
  # ----------------------------------
  Usage = Cmd + ' [options] ../etc/migration.conf'
  ArgParser = OptionParser(Usage)
  ArgParser.add_option("-v", action="store_true", dest="ShowVersion",  default=False,           help="show version info.")
  ArgParser.add_option("-c", action="store_true", dest="ShowConfig",   default=False,           help="show configuration.")

  Options, args = ArgParser.parse_args()
  argc = len(args)

  if (Options.ShowVersion):
    Banner = CmdDesc + ', Release ' + Version + ' Production, ' + VersionDate
    print Banner
    exit()

  if (argc > 0):
    ConfigFile = args[argc-1]
  else:
    print 'Configuration file is required.'
    print '\nExample:'
    print ' ', Usage
    exit(1)

  # Show the configuration parameters.
  # -----------------------------------
  if (Options.ShowConfig):
    DumpConfig(ConfigFile)
    exit()

  # Create dictionary of configuration settings.
  # -----------------------------------------------------------
  MigDict = ProcessConfig(ConfigFile, 'migration')
  CmdDict = ProcessConfig(ConfigFile, 'commands')

  # Scp command
  # ---------------------
  if 'scp' in CmdDict:
    Scp = CmdDict['scp']
  else:
    print '\nScp command is required. Check the scp key in the configuration file:', ConfigFile
    exit(1)

  # Database name
  # ---------------------
  if 'db_name' in MigDict:
    DbName = MigDict['db_name']
  else:
    print '\nDatabase name is required. Check the db_name key in the configuration file:', ConfigFile
    exit(1)

  # Default password
  # ---------------------
  if 'default_password' in MigDict:
    DefaultPassword = MigDict['default_password']
  else:
    print '\nDefault password is required. Check the default_password key in the configuration file:', ConfigFile
    exit(1)

  # Migration tmp dir.
  # ---------------------
  if 'migration_tmp' in MigDict:
    MigTmp = MigDict['migration_tmp']
  else:
    print '\nMigration tmp directory is required. Check the migration_tmp key in the configuration file:', ConfigFile
    exit(1)

  # Migration etc dir.
  # ---------------------
  if 'migration_etc' in MigDict:
    MigEtc = MigDict['migration_etc']
  else:
    print '\nMigration etc directory is required. Check the migration_etc key in the configuration file:', ConfigFile
    exit(1)

  # Migration log dir.
  # ---------------------
  if 'migration_log' in MigDict:
    MigLog = MigDict['migration_log']
  else:
    print '\nMigration log directory is required. Check the migration_log key in the configuration file:', ConfigFile
    exit(1)

  # Name the logfile.
  #--------------------------
  Logtime = datetime.now().strftime("%Y%m%d.%H%M%S")
  Logfile = pathjoin(MigLog, Cmd + '.' + Logtime + '.log')

  # Attach logfile to stdout
  # -------------------------
  sys.stdout = Logger(Logfile)

  # Oracle SID
  # ---------------------
  if 'oracle_sid' in MigDict:
    OracleSid = MigDict['oracle_sid']
  else:
    print '\nOracle Sid is required. Check the oracle_sid key in the configuration file:', ConfigFile
    exit(1)

  # Oracle home
  # ---------------------
  if 'oracle_home' in MigDict:
    OraHome = MigDict['oracle_home']
  else:
    print '\nOracle home is required. Check the oracle_home key in the configuration file:', ConfigFile
    exit(1)

  # Set the database environment.
  # ------------------------------
  OraSid, OraHome = SetOracleEnv(OracleSid)
  OraBin = pathjoin(OraHome, 'bin')
  Orapwd = pathjoin(OraBin, 'orapwd')
  if (not IsExecutable(Orapwd)):
    print 'The following command cannot be executed by this user account:', Orapwd
    exit(1)

  print '\n============================================================================================================================'
  print '%s: Release %s Production, %28s %22s' % (CmdDesc, Version, VersionDate, Now.strftime("%Y-%m-%d %H:%M"))
  print '============================================================================================================================'
  print 'Gathering cluster information...'
  NodeDict = GetNodes()
  PassfileBase = pathjoin(OraHome, 'dbs')

  # Define the fully qualified password file names.
  # -------------------------------------------------
  for NodeName in sorted(NodeDict.keys()):
    Passfile = pathjoin(PassfileBase,'orapw' + DbName + NodeDict[NodeName]['NodeId'])
    NodeDict[NodeName]['Passfile'] = Passfile

  # Password file that will be created and replicated to the other nodes.
  # ----------------------------------------------------------------------
  NewPassfile = pathjoin(MigEtc, basename(NodeDict[sorted(NodeDict.keys())[0]]['Passfile']))

  print ''
  print 'This script performs the following tasks:'
  print '  1) Creates a new database password file and copies it to the $ORACLE_HOME/dbs'
  print '     directory on all nodes.'
  print ''
  print 'Requirements:'
  print '  1) The user account must be able to write to the $ORACLE_HOME/dbs directory.'
  print '  2) The user account must be trusted (no password required) across all nodes of the cluster.'
  print '  3) It is expected that the instance names will be the database name postfixed with'
  print '     the node id. For example: DbName = MYDB, Node1 password file = orapwMYDB1.'
  print ''

  print 'The following settings will be used for this run:'
  print '  Db Name         :', DbName
  print '  Oracle SID      :', OraSid
  print '  Oracle Home     :', OraHome
  for NodeName in sorted(NodeDict.keys()):
    print '  Password File   :', NodeName, NodeDict[NodeName]['Passfile']

  Response = raw_input("\nContinue? (y/N) ")
  if (Response.upper() != 'Y'):
    print '\nExiting. No changes made...'
    exit(0)
  else:
    print '\nConfirmed. Proceeding with changes...'

  # Create a password file.
  # --------------------------------------------------------
  proc = Popen([Orapwd, 'file=' + NewPassfile, 'password=' + DefaultPassword, 'entries=5', 'ignorecase=y', 'force=y'], stdin=PIPE, stdout=PIPE, stderr=STDOUT, \
          shell=False, universal_newlines=True, close_fds=True)
  rc = proc.wait()
  Stdout = proc.stdout.read()
  Stdout = Stdout.strip()
  if (rc != 0):
    print 'Failure creating password file:', NewPassfile
    print Stdout
    exit(1)

  # Scp password files to $ORACLE_HOME/dbs on all nodes.
  # --------------------------------------------------------
  print '\nCopy password files to $ORACLE_HOME/dbs on all nodes.'
  for NodeName in sorted(NodeDict.keys()):
    Passfile = NodeDict[NodeName]['Passfile']
    print ' ', Scp, '-q', NewPassfile, NodeName + ':' + Passfile
    proc = Popen([Scp, '-q', NewPassfile, NodeName + ':' + Passfile], stdin=PIPE, stdout=PIPE, stderr=STDOUT, \
            shell=False, universal_newlines=True, close_fds=True)

    rc = proc.wait()
    Stdout = proc.stdout.read()
    Stdout = Stdout.strip()
    if (rc != 0):
      print 'Failure copying password file to node:', NodeName
      print Stdout
      exit(1)

  print '\n============================================================================================================================'
  print '%s Complete %92s' % (Cmd, datetime.now().strftime("%Y-%m-%d %H:%M"))
  print '============================================================================================================================'
  exit(0)
