#!/bin/env python

##################################################################################################
#  Name:        tunafish                                                                         #
#  Author:      Randy Johnson                                                                    #
#  Description: Tunafish, because you can tune a database but you can't tune a fish. ;)          #
#               consolidates all my favorite Oracle DBA scripts into a single script categorized #
#               by type (sql tuning = sql, data guard = dg, etc.). The first positional          #
#               is the type of report/action and determines the command line options, usage,     #
#               etc.                                                                             #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 07/23/2015 1.00 Randy Johnson    Initial write.                                                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse   import OptionParser
from os         import environ
from os.path    import basename
from sys        import argv
from sys        import exit
from sys        import version_info
from Oracle     import RunSqlplus
from Oracle     import SetOracleEnv


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0])
  CmdPrefix      = Cmd.split('.')[0]
  Version        = '1.00'
  VersionDate    = 'Mon Jul 20 11:15:14 CDT 2015'
  Sql            = ''
  ErrChk         = False
  ArgParser      = OptionParser()
  Type           = ''
  TypeList       = ['fs','parms']

  # Check/set the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  argc = len(argv)
  Usage = Cmd + " TYPE [options]"
  if (argc >= 2):
    Type = argv[1]
  else:
    print(Usage)
    exit(1)
  
  if (Type not in TypeList):
    print("\nInvalid type: %s" % Type)
    print("\nTry one of: %s" % ', '.join(TypeList))
    exit(1)

  # Global Options
  ArgParser.add_option("-r", dest="Rows",                            default=0,      type=int, help="limit output to nnn rows (default 0=off)")
  ArgParser.add_option("--s", dest="Show",      action="store_true", default=False,            help="print SQL query.")
  ArgParser.add_option("--v", dest="Version",   action="store_true", default=False,            help="print version info.")


  if (Type == 'fs'): # Find SQL Reports
    CmdDesc = 'Find SQL in Shared Pool'
    ArgParser.add_option("-g", dest='Global',    action="store_true", default=False,            help="search gv$sql (default is v$sql)")
    ArgParser.add_option("-i", dest="SqlId",                          default='',     type=str, help="value for sql_id")
    ArgParser.add_option("-t", dest="SqlText",                        default='',     type=str, help="value for sql_text")
    ArgParser.add_option("-x", dest="Fsx",       action="store_true", default=False,            help="report Exadata IO reduction.")
    Options, args = ArgParser.parse_args()
  else:
    print '\nInvalid Type: %s' % Type
    exit(1)

  if (Options.Version):
    Banner = CmdDesc + ', Release ' + Version + ' Production, ' + VersionDate
    print('\n%s' % Banner)
    exit()

  if (Type == 'fs'):
    #  Description: This script can be used to locate statements in the shared pool and              #
    #               determine whether they have been executed via Smart Scans.                       #
    #                                                                                                #
    #               It is based on the observation that the IO_CELL_OFFLOAD_ELIGIBLE_BYTES           #
    #               column in V$SQL is only greater than 0 when a statement is executed              #
    #               using a Smart Scan. The IO_SAVED_% column attempts to show the ratio of          #
    #               of data received from the storage cells to the actual amount of data             #
    #               that would have had to be retrieved on non-Exadata storage. Note that            #
    #               as of 11.2.0.2, there are issues calculating this value with some queries.       #
    #                                                                                                #
    #               Note that the AVG_ETIME will not be acurate for parallel queries. The            #
    #               ELAPSED_TIME column contains the sum of all parallel slaves. So the              #
    #               script divides the value by the number of PX slaves used which gives an          #
    #               approximation.                                                                   #
    #                                                                                                #
    #               Note also that if parallel slaves are spread across multiple nodes on            #
    #               a RAC database the PX_SERVERS_EXECUTIONS column will not be set.                 #
    #                                                                                                #
    #               Credit to Kerry Osborne for the core logic in the SQL queries.                   #
    if (Options.Fsx == True):
      Sql += "column sql_id               format a14                  heading \"SQL ID\"\n"
      Sql += "column sql_text             format a60                  heading \"SQL Text\" word_wrap\n"
      Sql += "column child                format 99999                heading \"Child\"\n"
      Sql += "column execs                format 9,999,999,999        heading \"Executions\"\n"
      Sql += "column avg_etime            format 999,999,999.9        heading \"Avg Ela Sec\"\n"
      Sql += "column etime                format 999,999,999.9        heading \"Avg Ela Sec\"\n"
      Sql += "column plan_hash_value      format 99999999999          heading \"Plan Hash\"\n"
      Sql += "column lio                  format 999,999,999,999      heading \"LIO\"\n"
      Sql += "column avg_lio              format 999,999,999,999      heading \"Avg LIO's\"\n"
      Sql += "column avg_pio              format 999,999,999,999      heading \"Avg PIO's\"\n"
      Sql += "column rows_proc            format 999,999,999,999      heading \"Rows\"\n"
      Sql += "column begin_interval_time  format a30                  heading \"Begin Int Time\"\n"
      Sql += "column node                 format 99999                heading \"Node\"\n"
      Sql += "column versions             format 99999                heading \"Vers\"\n"
      Sql += "column percent_of_total     format 999.99               heading \"% of Tot\"\n"
      Sql += "\n"
      Sql += "SELECT /*****FIND SQL SCRIPT*****/\n"
      if (Options.Global):
        Sql += "       inst_id inst\n"
      Sql += "       sql_id,\n"
      Sql += "       child_number child,\n"
      Sql += "       executions execs,\n"
      Sql += "       (elapsed_time/1000000) / DECODE(NVL(executions,0),0,1,executions)\n"
      Sql += "         / DECODE(px_servers_executions,0,1,px_servers_executions\n"
      Sql += "         /DECODE(NVL(executions,0),0,1,executions)) \"Avg Ela Sec\",\n"
      Sql += "       px_servers_executions / DECODE(NVL(executions,0),0,1,executions) \"Avg PX\",\n"
      Sql += "       TO_CHAR(LAST_ACTIVE_TIME,\'yy/mm/dd hh24:mi\') \"Last Active\",\n"
      Sql += "       DECODE(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,\'No\',\'Yes\') \"Off'\",\n"
      Sql += "       DECODE(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,0,100 *\n"
      Sql += "        (IO_CELL_OFFLOAD_ELIGIBLE_BYTES - IO_INTERCONNECT_BYTES) /\n"
      Sql += "        DECODE(IO_CELL_OFFLOAD_ELIGIBLE_BYTES,0,1,IO_CELL_OFFLOAD_ELIGIBLE_BYTES)) \"IO Saved %\",\n"
      Sql += "       sql_text\n"
      if (Options.Global):
        Sql += "  FROM gv$sql s\n"
      else:
        Sql += "  FROM v$sql s\n"
      Sql += " WHERE sql_text NOT LIKE '%*****FIND SQL SCRIPT*****%'\n"
      if (Options.SqlText != ''):
        Sql += "   AND UPPER(sql_text) LIKE UPPER('%" + Options.SqlText + "%\')\n"
      if (Options.SqlId != ''):
        Sql += "   AND sql_id LIKE '%" + Options.SqlId + "%'\n"
        Sql += "   AND sql_id LIKE\n"
        Sql += "       CASE\n"
        Sql += "          WHEN '" + Options.SqlId + "' = 'last'\n"
        Sql += "          THEN (SELECT prev_sql_id FROM v$session WHERE sid = (SELECT sid FROM v$mystat WHERE rownum = 1))\n"
        Sql += "          ELSE '" + Options.SqlId + "'\n"
        Sql += "       END\n"
      if (Options.Rows != 0):
        Sql += "  AND rownum <= " + Options.Rows + "\n";
      if (Options.Global):
        Sql += " ORDER BY inst_id, sql_id, child_number, plan_hash_value;\n"
      else:
        Sql += " ORDER BY sql_id, child_number, plan_hash_value;\n"
    else:
      Sql  = "col sql_text for a60 word_wrap\n"
      Sql += "set verify off\n"
      Sql += "set pagesize 999\n"
      Sql += "set lines 155\n"
      Sql += "col username format a13\n"
      Sql += "col prog format a22\n"
      Sql += "col sid format 999\n"
      Sql += "col child_number      format 99999 heading CHILD\n"
      Sql += "col ocategory         format a10\n"
      Sql += "col avg_etime         format 9,999,999.99\n"
      Sql += "col avg_pio           format 9,999,999.99\n"
      Sql += "col avg_lio           format 999,999,999\n"
      Sql += "col etime             format 9,999,999.99\n"
      Sql += "col first_load_time   format a19\n"
      Sql += "set feedback off\n"
      Sql += "\n"
      Sql += "SELECT /*****FIND SQL SCRIPT*****/\n"
      if (Options.Global):
        Sql += "     inst_id inst\n"
      Sql += "       sql_id,\n"
      Sql += "       child_number,\n"
      Sql += "       plan_hash_value plan_hash,\n"
      Sql += "       executions execs,\n"
      Sql += "       (elapsed_time/1000000)/decode(nvl(executions,0),0,1,executions) avg_etime,\n"
      Sql += "       buffer_gets/decode(nvl(executions,0),0,1,executions) avg_lio,\n"
      Sql += "       FIRST_LOAD_TIME,\n"
      Sql += "       sql_text\n"
      if (Options.Global):
        Sql += "  FROM gv$sql s\n"
      else:
        Sql += "  FROM v$sql s\n"
      Sql += " WHERE sql_text NOT LIKE '%*****FIND SQL SCRIPT*****%'\n"
      if (Options.SqlText != ''):
        Sql += "   AND UPPER(sql_text) LIKE UPPER('%" + Options.SqlText + "%\')\n"
      if (Options.SqlId != ''):
        Sql += "   and sql_id like nvl('" + Options.SqlId + "',sql_id)\n"
      Sql += " order by 4, 1, 2, 3;\n"


  # Ready to run report now...
  Sql = Sql.strip()

  if(Options.Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Execute the report
  (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)


  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
